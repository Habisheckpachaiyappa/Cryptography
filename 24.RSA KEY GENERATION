#include <stdio.h>
#include <math.h>

// Function to find the prime factors of n
void findPrimeFactors(int n, int *p, int *q) {
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {
            *p = i;
            *q = n / i;
            return;
        }
    }
    *p = *q = -1;  // If no factors are found (not possible for this problem)
}

// Function to calculate φ(n)
int computeTotient(int p, int q) {
    return (p - 1) * (q - 1);
}

// Extended Euclidean Algorithm to find gcd and modular inverse
int extendedGCD(int a, int b, int *x, int *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extendedGCD(b, a % b, &x1, &y1);
    *x = y1;
    *y = x1 - (a / b) * y1;
    return gcd;
}

// Function to find modular inverse of e modulo φ(n)
int modInverse(int e, int phi) {
    int x, y;
    int gcd = extendedGCD(e, phi, &x, &y);
    if (gcd != 1) {
        printf("No modular inverse exists.\n");
        return -1;
    }
    return (x % phi + phi) % phi;  // Ensure positive result
}

int main() {
    int n = 3599, e = 31;
    int p, q;

    // Step 1: Find the prime factors of n
    findPrimeFactors(n, &p, &q);

    if (p == -1 || q == -1) {
        printf("Error: Unable to factorize n.\n");
        return 1;
    }

    printf("Prime factors of n: p = %d, q = %d\n", p, q);

    // Step 2: Compute φ(n)
    int phi = computeTotient(p, q);
    printf("Totient φ(n) = %d\n", phi);

    // Step 3: Compute the private key d
    int d = modInverse(e, phi);
    if (d == -1) {
        printf("Error: Unable to compute modular inverse.\n");
        return 1;
    }

    // Step 4: Display the public and private keys
    printf("Public Key: (e = %d, n = %d)\n", e, n);
    printf("Private Key: d = %d\n", d);

    return 0;
}
