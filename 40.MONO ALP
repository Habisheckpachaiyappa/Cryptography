#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_TEXT_LENGTH 1000

// Frequency of letters in English (for comparison)
int englishFrequency[ALPHABET_SIZE] = { 8, 1, 3, 4, 12, 2, 3, 6, 7, 0, 0, 4, 2, 6, 8, 2, 1, 6, 6, 9, 2, 2, 4, 2, 2, 0 };

// Function to calculate frequency of letters in the ciphertext
void calculateFrequency(const char *ciphertext, int frequency[ALPHABET_SIZE]) {
    int i;
    for (i = 0; ciphertext[i] != '\0'; i++) {
        char c = tolower(ciphertext[i]);
        if (c >= 'a' && c <= 'z') {
            frequency[c - 'a']++;
        }
    }
}

// Function to sort the frequency array in descending order
void sortFrequency(int frequency[ALPHABET_SIZE], int sortedIndex[ALPHABET_SIZE]) {
    int i, j, temp;
    for (i = 0; i < ALPHABET_SIZE; i++) {
        sortedIndex[i] = i; // Initialize sorted index array
    }
    
    // Sort indices based on the frequency of letters
    for (i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (j = i + 1; j < ALPHABET_SIZE; j++) {
            if (frequency[sortedIndex[i]] < frequency[sortedIndex[j]]) {
                temp = sortedIndex[i];
                sortedIndex[i] = sortedIndex[j];
                sortedIndex[j] = temp;
            }
        }
    }
}

// Function to display the letter frequencies
void displayFrequency(int frequency[ALPHABET_SIZE]) {
    printf("Letter Frequency:\n");
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        printf("%c: %d\n", 'A' + i, frequency[i]);
    }
}

// Function to decrypt the ciphertext using the letter mapping
void decryptWithMapping(const char *ciphertext, char mapping[ALPHABET_SIZE], char *decryptedText) {
    int i;
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            decryptedText[i] = mapping[tolower(ciphertext[i]) - 'a'] + base;
        } else {
            decryptedText[i] = ciphertext[i];
        }
    }
    decryptedText[i] = '\0'; // Null terminate the decrypted string
}

// Function to perform a letter frequency attack
void frequencyAttack(const char *ciphertext, int topN) {
    int frequency[ALPHABET_SIZE] = { 0 };
    int sortedIndex[ALPHABET_SIZE];
    int i;

    // Step 1: Calculate the letter frequency in the ciphertext
    calculateFrequency(ciphertext, frequency);

    // Step 2: Display the letter frequency
    displayFrequency(frequency);

    // Step 3: Sort the letters by frequency
    sortFrequency(frequency, sortedIndex);

    // Step 4: Try to map the most frequent ciphertext letters to the most common English letters
    printf("\nTop %d Possible Plaintexts based on Frequency Analysis:\n", topN);

    // Generate mappings
    char mapping[ALPHABET_SIZE];
    for (i = 0; i < ALPHABET_SIZE; i++) {
        mapping[sortedIndex[i]] = 'e' + i; // 'e' is the most frequent letter in English
    }

    // Step 5: Display the top N possible decrypted messages
    for (i = 0; i < topN; i++) {
        char decryptedText[MAX_TEXT_LENGTH];
        char tempMapping[ALPHABET_SIZE];
        memcpy(tempMapping, mapping, sizeof(mapping));

        // Swap the letters based on frequency analysis (approximation)
        tempMapping[sortedIndex[i]] = 'e' + i;

        decryptWithMapping(ciphertext, tempMapping, decryptedText);
        printf("Shift %d: %s\n", i, decryptedText);
    }
}

int main() {
    char ciphertext[MAX_TEXT_LENGTH];
    int topN;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, MAX_TEXT_LENGTH, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  // Remove the newline character

    printf("How many top plaintexts would you like to see? ");
    scanf("%d", &topN);

    // Perform the frequency attack
    frequencyAttack(ciphertext, topN);

    return 0;
}
